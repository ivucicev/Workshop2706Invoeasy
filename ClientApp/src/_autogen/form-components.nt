//************************************************************************
//************************************************************************
//*** DO NOT MODIFY - CODE IS AUTOGENERATED AND IT WILL BE OVERWRITTEN ***
//************************************************************************
//************************************************************************

{{ config.RenderWhenProjectBuildIsDone = true }}
{{ config.RenderWhenTemplateIsSaved = true }}

{{ classes = data.Classes | Symbols.WhereNameEndsWith "BM"}}

{{ for class in classes
    capture output
    submitButton = "{{ submitButton }}";
}}
import { KeyValue } from '@angular/common';
import { AfterViewInit, Component, OnInit, OnDestroy, Input, EventEmitter, Output, OnChanges, ViewChildren, ViewChild, QueryList } from '@angular/core';
import { AbstractControl, FormControl, UntypedFormGroup, Validators } from '@angular/forms';
import { {{ class.Name  | String.Replace "BM" "FormService" }} } from '@forms/{{ class.Name  | String.Replace "BM" "FormService" }}';
import { objKeyValueRegisterType } from '@models/RegisterType';
import { Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { FAQService } from '@services/FAQService';
import { BusinessPartnerService } from '@services/BusinessPartnerService';
import { RegisterService } from '@services/RegisterService';
import { AdministrationService } from '@services/AdministrationService';
import { UserService } from '@services/UserService';
import { UserAuthService } from '@magplancore/services/user.service';
import CustomStore from 'devextreme/data/custom_store';
import { DxNumberBoxComponent } from 'devextreme-angular';
import { environment } from '@env/environment';
import { UnsavedChangesModalComponent } from '@magplanshared/unsaved-changes-modal/unsaved-changes-modal.component';
import { DropdownBoxComponent } from '@magplanshared/dropdown-box/dropdown-box.component';
import { RegisterSelectComponent } from '@magplanshared/register-select/register-select.component';
import { DxDateBoxComponent } from 'devextreme-angular';
import { TagBoxComponent } from '@magplanshared/tag-box/tag-box.component';
import { DamageSymptomDropdownComponent } from '@magplanshared/damage-symptom-dropdown/damage-symptom-dropdown.component';
import { AppModule } from "@models/AppModule";
import { TranslationsModalComponent } from '@magplanshared/translations-modal/translations-modal.component';
import { CustomFieldAppModule } from '@models/CustomFieldAppModule';
import { ImageInputComponent } from '@magplanshared/image-input/image-input.component';
import { DropdownBoxService } from '@magplanshared/dropdown-box/dropdown-box.service';
import { InputsDisplayModalComponent } from '@magplanshared/inputs-display-modal/inputs-display-modal.component';
import { HideInputsService } from '@magplanshared/inputs-display-modal/hide-inputs-service';
import { TextInputModalComponent } from '@magplanshared/text-input-modal/text-input-modal.component';
import { SettingKey } from '@models/SettingKey';
import { Currency } from '@models/Currency';
import { CustomInputsFormComponent } from '@magplanshared/custom-inputs-form/custom-inputs-form.component';
import { NavigationStart, Router } from '@angular/router';
import { BackNavigationService } from '@magplancore/services/back-navigation.service';


{{- fields = class.Name |  String.Replace "BM" "Fields"
    inputFields = class.Name |  String.Replace "BM" "InputFields" }}
import { {{ fields }}, {{ inputFields }} } from '@models/{{ class.Name }}';
{{-
    lookups = ["BusinessPartnerDropdown", "ProductionLineDropdown", "AssetDropdown",
        "ComponentDropdown", "PartDropdown", "LocationDropdown", "ProductGroupDropdown",
        "MeasuringDeviceDropdown", "TeamDropdown", "CostUnitDropdown", "ComponentTypeDropdown",
        "AssetTypeDropdown", "DowntimeTypeDropdown", "UserDropdown", "EmailTemplateDropdown",
        "TagDropdown", "UnitDropdown", "FaqAppliesToDropdown", "OrderPriorityDropdown",
        "OrderStatusDropdown", "AssetComponentDropdown", "CounterDropdown", "WorkstepGroupDropdown"];
    registerTypes = ["SalutationDropdown", "PartnerCategoryDropdown", "BranchDropdown",
        "QualificationDropdown", "PartStatusDropdown", "ComponentStatusDropdown",
        "AssetStatusDropdown", "PartnerStatusDropdown", "CategoryDropdown",
        "CauseOfDamageDropdown", "CostTypeDropdown", "ExtraCostTypeDropdown", "ContactTypeDropdown",
        "DocumentTypeDropdown", "DamageSymptomDropdown", "OrderTypeDropdown",
        "FaqCategoryDropdown", "WorkstepCategoryDropdown"];
}}

@Component({
    selector: 'magplan-{{ class.Name | String.Downcase | String.Replace "bm" "-form" }}',
    template: `
        <form [formGroup]="form" (ngSubmit)="submit()">
            <div class="row" [style.padding-top]="hasTitle ? null : '20px'">
                <div class="col-sm-12" [class]="moveTranslateButtonUp ? 'translate-button move' : 'translate-button'">
                        <button *showTranslateForm [requirePermissions]="['SETTINGS_WRITE']" class="btn btn-sm ms-1" (click)="openTranslationsModal()" type="button">
                            <i class="bx bx-pencil"></i>
                        </button>
                        <button *ngIf="showInputsDisplayConfig" class="btn btn-sm ms-1" (click)="openInputsDisplayModal()" type="button">
                            <i class="bx bx-cog"></i>
                        </button>
                </div>

               <div class="row pb-2 justify-content-evenly" *ngIf="featuredImage || showBarcode">
                {{- for property in class.Properties | Symbols.ThatArePublic }}
                    {{- if property.Name == "EANCode" }}
                        <ng-container *ngIf="showBarcode && f.{{ property.Name | String.ToCamelCase }}.value && f.{{ property.Name | String.ToCamelCase }}.valid">
                            <div class="col-auto mh-25 align-self-center">
                                <magplan-barcode [eanCode]="f.{{ property.Name | String.ToCamelCase }}.value"></magplan-barcode>
                            </div>
                        </ng-container>
                    {{-end}}
                    {{- if property.Name == "PhotoUrl" || (property | Symbol.HasAttribute "Image") }}
                        <ng-container *ngIf="featuredImage">
                            <div class="col-auto mh-25 align-self-center">
                                <label *ngIf="featuredImageLabel" for="{{ property.Name | String.ToCamelCase }}" translate>{{ label }}</label>
                                <magplan-image-input id="{{ property.Name | String.ToCamelCase }}" formControlName="{{ property.Name | String.ToCamelCase }}"></magplan-image-input>
                            </div>
                        </ng-container>
                    {{-end}}
                {{-end}}
                </div>
               
            {{- index = 0 }}
            {{- for property in class.Properties | Symbols.ThatArePublic }}
                {{- propertyName = (property.Name | String.ToCamelCase) }}
                {{- module = class.Namespace | String.Split "." | Array.Last }}
                {{- name = property.Name | String.Replace " " "" }}
                {{- label = module + "." + name }}
                {{- id = propertyName }}
                {{- formControlName = propertyName }}
                {{- isDropdownValue = false }}
                {{- isRequired = "<span *ngIf=\"f['" + (propertyName) + "']?.hasValidator(requiredValidator)\">*</span>"}}
                {{- for attribute in property.Attributes }}
                {{- if attribute.Name | String.Contains "Dropdown"
                        isDropdownValue = true }}
                {{-end}}
                {{-end}}
                {{- isStaticRegisterMultiselect = false
                    for attribute in property.Attributes
                        if attribute.Name | String.Contains "StaticRegisterMultiselect"
                        isStaticRegisterMultiselect = true
                    end
                end}}
                 {{-if property.Name != "PhotoUrl" || (property | Symbol.HasAttribute "Image") }}
                <div class="col-sm-12" *ngIf="!combinedHideConfig?.{{ property.Name | String.ToCamelCase }}" [ngClass]="{ 'col-md-6': configuration?.{{ property.Name | String.ToCamelCase }} }">

                    {{- if ((property.Type != "Guid" && property.Type != "Guid?") || isDropdownValue) }}
                    {{-if property.Type == "bool" || property.Type == "bool?" }}
                    <div class="form-check mb-1">
                    {{- else }}
                    <div class="mb-1">
                    {{- end}}
                    {{- if property.Type == "string" }}
                        {{-textarea=false}}
                        {{-for attribute in property.Attributes}}
                            {{-if attribute.Arguments | String.Split ":" | Array.Offset 1 | Array.First | String.Split "," | Array.First | String.ToInt > 250 }}
                                {{-textarea=true}}
                            {{-end}} {{end}}
                        {{-if textarea}}
                        <div class="d-flex align-items-center">
                            <label for="{{ property.Name | String.ToCamelCase }}" translate>{{ label }}</label>{{isRequired}}
                            <button type="button" class="btn pt-2 p-1" (click)="openTextInputModal('{{property.Name | String.ToCamelCase}}')">
                                <i class="bx bx-zoom-in font-size-15"></i>
                            </button>
                        </div>
                        {{-else}}
                            <label for="{{ property.Name | String.ToCamelCase }}" translate>{{ label }}</label>{{isRequired}}
                        {{-end}}
                        {{-if property.Name | String.Downcase | String.Contains "email" }}
                            <div class="input-group">
                                <input type="email" class="form-control" id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }">
                                <div class="input-group-text">
                                    <i class="mdi mdi-email"></i>
                                </div>
                            </div>
                        {{-else if property.Name | String.Downcase | String.Contains "password" }}
                            <div class="input-group auth-pass-inputgroup">
                                <input #password type="password" class="form-control" id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }">
                                <button (click)="password.type == 'password' ? password.type = 'text' : password.type = 'password'" class="btn btn-sm btn-light ms-0 password-addon" type="button">
                                    <i *ngIf="password.type == 'password'" class="mdi mdi-eye-outline"></i>
                                    <i *ngIf="password.type == 'text'" class="mdi mdi-eye-off-outline"></i>
                                </button>
                            </div>
                        {{-else}}
                        {{-if property.Name | String.Downcase == 'subdomain' }}
                            <div class="input-group">
                                <input type="text" class="form-control" id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }">
                                <div class="input-group-text">.magplan.de</div>
                            </div>
                        {{-else if property.Name | String.Downcase | String.Contains "weburl"}}
                             <div class="input-group">
                                <input type="text" #weburl class="form-control" id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }">
                                <a class="input-group-text" target="_blank" [attr.href]={%{"weburl.value ? '//' + weburl.value : ''"}%}>
                                    <i class="bx bx-globe"></i>
                                </a>
                            </div>
                        {{-else if (property.Name | String.Downcase == 'color') ||  (property | Symbol.HasAttribute "Color") }}
                            <input type="color" class="form-control w-100" id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }">
                        {{-else if property.Name | String.Downcase == 'country' }}
                            <magplan-country-select formControlName="{{ formControlName }}"></magplan-country-select>
                        {{-else}}
                            {{-if (property | Symbol.HasAttribute "MaxLength") || (property | Symbol.HasAttribute "StringLength") }}
                                {{-if textarea}}
                                    <textarea style="background-image: none !important" type="text" class="form-control" id="{{ property.Name | String.ToCamelCase }}" formControlName="{{ property.Name | String.ToCamelCase }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ property.Name | String.ToCamelCase }}.touched) && f.{{ property.Name | String.ToCamelCase }}.errors }" rows="4" cols="4"></textarea>
                                {{-else}}
                                    <input type="text" class="form-control" id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }">
                                {{-end}}
                            {{-else if (property | Symbol.HasAttribute("RichText"))}}
                                <magplan-rich-text id="{{ id }}" name="{{ propertyName }}" formControlName="{{ formControlName }}"
                                    [configuration]="{
                                        propertyName: '{{ propertyName }}',
                                        label: '{{label}}',
                                        isRequired: f['{{ (propertyName)}}']?.hasValidator(requiredValidator)
                                        }"
                                ></magplan-rich-text>
                            {{-else}}
                                <input type="text" class="form-control" id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }">
                            {{-end}}
                            {{-end}}
                        {{-end}}
                    {{- else if property.Type == "int" || property.Type == "int?" }}
                        <label for="{{ id }}" translate>{{ label }}</label>{{isRequired}}
                        <input type="number" class="form-control" id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }">
                    {{- else if property.Type == "decimal" || property.Type == "decimal?" || property.Type == "double" || property.Type == "double?" }}
                        <label for="{{ id }}" translate>{{ label }}</label>{{isRequired}}
                        {{- if (property | Symbol.HasAttribute "Percentage") || (property | Symbol.HasAttribute "Money")}}
                            <div class="input-group">
                                {{- if property | Symbol.HasAttribute "Percentage" }}
                                <dx-number-box format="#,##0.00 %" [max]="100" [step]="0.01" id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }" valueChangeEvent="keyup"></dx-number-box>
                                <div class="input-group-text">
                                    <i class="mdi mdi-percent"></i>
                                </div>
                                {{- else if property | Symbol.HasAttribute "Money"}}
                                <dx-number-box format="#,##0.00" [step]="1" id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }" valueChangeEvent="keyup"></dx-number-box>
                                <div class="input-group-text" [ngSwitch]="currentCurrency">
                                    <i class="mdi mdi-currency-eur" *ngSwitchDefault></i>
                                    <i class="mdi mdi-currency-gbp" *ngSwitchCase="currencyEnum.GBP"></i>
                                    <i class="mdi mdi-currency-usd" *ngSwitchCase="currencyEnum.USD"></i>
                                </div>
                                {{- else }}
                                <dx-number-box format="#,##0.00" [step]="1" id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }" valueChangeEvent="keyup"></dx-number-box>
                                {{-end}}
                            </div>
                        {{- else}}
                            <dx-number-box name="{{ propertyName }}" format="#,##0.00" [step]="1" id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }" valueChangeEvent="keyup"></dx-number-box>
                        {{-end}}
                    {{- else if property.Type == "bool" || property.Type == "bool?" }}
                        <input class="form-check-input" type="checkbox" formControlName="{{ formControlName }}" id="{{ id }}{%{{{ modelName }}}%}">
                        <label class="form-check-label" for="{{ id }}{%{{{ modelName }}}%}" translate>{{ label }}</label>
                    {{- else if property | Symbol.HasAttribute "DateOnlyType" }}
                        <label for="{{ id }}" translate>{{label}}</label>{{isRequired}}
                        <dx-date-box id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }"> </dx-date-box>
                    {{- else if property.Type == "DateTime" || property.Type == "DateTime?"  }}
                        <label for="{{ id }}" translate>{{label}}</label>{{isRequired}}
                        <dx-date-box id="{{ id }}" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }" type="datetime"> </dx-date-box>
                    {{- else if property.Type == "TimeSpan" || property.Type == "TimeSpan?"  }}
                        <label for="{{ id }}" translate>{{label}}</label>{{isRequired}}
                        <dx-date-box class="formdate-box" id="{{ id }}" type="time" [displayFormat]="'HH:mm'" [dateSerializationFormat]="'HH:mm'" formControlName="{{ formControlName }}" [ngClass]="{ 'is-invalid': (submitted || f.{{ propertyName }}.touched) && f.{{ propertyName }}.errors }"> </dx-date-box>
                    {{- else if property.Type.IsEnum || property.Type == "PriceType?" || property.Type == "AssetPriority?" || property.Type == "HomePage?" || property.Type == "RecurrenceType?" || property.Type == "NotAllowedDateAction?" }}
                        <magplan-dropdown-box id="{{ id }}" name="{{ propertyName }}" formControlName="{{ formControlName }}"
                            [isRequired]="f['{{ (propertyName)}}']?.hasValidator(requiredValidator)" [propertyName]="'{{propertyName}}'" [label]="'{{label}}'"
                            [options]="[{{-for enum in data.Enums | Symbols.WhereNameMatches property.Type.Name }}{{-for prop in enum.Values }}{{'{'}} text: '{{ prop.Name }}', value: {{ prop.Value }} {{'}'}},{{-end }}{{-end }}]">
                        </magplan-dropdown-box>
                    {{- else if isStaticRegisterMultiselect
                            dataSource = ''
                            if property.Name | String.StartsWith 'RecurrenceDates'
                                i = 1
                                while i <= 31
                                    dataSource = dataSource | String.Append "{ text: '" + i + ".', value: " + i + " }, "
                                    i = 1 + i
                                end
                            else
                                enum = data.Enums | Symbols.WhereNameMatches (property.Type.Name | String.Replace '[]' '' ) | Array.First
                                for prop in enum.Values
                                   dataSource = dataSource | String.Append "{ text: '" + prop.Name + "', value: " + prop.Value + " }, "
                                end
                            end
                     }}
                        <magplan-static-register-multiselect
                            formControlName="{{ formControlName }}"
                            [isRequired]="f['{{ (propertyName)}}']?.hasValidator(requiredValidator)"
                            [configuration]="{
                                propertyName: '{{ propertyName }}',
                                label: '{{label}}',
                                dataSource: [{{dataSource}}]
                            }"></magplan-static-register-multiselect>
                    {{- else if isDropdownValue }}
                        {{-for attribute in property.Attributes}}
                            {{-if registerTypes | Array.Contains attribute.Name }}
                                {{- registerName = attribute.Name | String.Split "Dropdown" | Array.First | String.SplitIntoSeparateWords | Array.Join "_" | String.Upcase }}
                                {{- if attribute.Name == 'DamageSymptomDropdown'}}
                                    <magplan-damage-symptom-dropdown #damageSymptomDropdown formControlName="{{ formControlName }}" [propertyName]="'{{ propertyName }}'">
                                    </magplan-damage-symptom-dropdown>
                                {{- else }}
                                    <magplan-register-select id="{{ id }}" formControlName="{{ formControlName }}"
                                        [configuration]="{
                                            propertyName: '{{ propertyName }}',
                                            label: '{{label}}',
                                            type: objKeyValueRegisterType['{{registerName}}'],
                                            isRequired: f['{{ (propertyName)}}']?.hasValidator(requiredValidator)
                                       }">
                                    </magplan-register-select>
                                {{- end}}
                            {{-else if (lookups | Array.Contains attribute.Name) && !((property.Type | String.Contains '[]') || (property.Type | String.Contains 'List')) }}
                            {{-configuration = ''
                               if attribute.Name == 'BusinessPartnerDropdown'
                               for attribute in property.Attributes
                                   additionalQueryParameters = "['type', '=', 1]"
                                   if (attribute.Arguments | String.Split ": " | Array.Last | String.Replace "[" "" | String.Replace "]" "") == 'BusinessPartnerType.Person'
                                       additionalQueryParameters = "['type', '=', 2]"
                                   end
                                   configuration = "{
                                    advancedSearchColumns: [
                                        { dataField: 'number', caption: 'BusinessPartner.Number' },
                                        { dataField: 'name', caption: 'BusinessPartner.Name' },
                                        { dataField: 'email', caption: 'BusinessPartner.Email' },
                                        { dataField: 'street', caption: 'BusinessPartner.Street' },
                                        { dataField: 'postalCode', caption: 'BusinessPartner.PostalCode' },
                                        { dataField: 'city', caption: 'BusinessPartner.City' },
                                        { dataField: 'country', caption: 'BusinessPartner.Country' }],
                                    fetchMethod: this.businessPartnerService.getBusinessPartners,
                                    fetchByIdMethod: this.businessPartnerService.getBusinessPartnerByIdLight,
                                    displayValueProperties: ['number', 'name'],
                                    sortOptions: [{ selector: 'name', desc: false }],
                                    navigation: '/business-partner/detail/',
                                    appModule: appModule.BusinessPartner,
                                    additionalQueryParameters:" + additionalQueryParameters + "}"
                               end
                               else if attribute.Name == 'ProductionLineDropdown'
                                   configuration = "dropdownBoxService.productionLineConfiguration"
                               else if attribute.Name == 'AssetDropdown'
                                   configuration = "dropdownBoxService.assetConfiguration"
                               else if attribute.Name == 'ComponentDropdown'
                                   configuration = "dropdownBoxService.componentConfiguration"
                               else if attribute.Name == 'PartDropdown'
                                   configuration = "dropdownBoxService.partConfiguration"
                               else if attribute.Name == 'ProductGroupDropdown'
                                   configuration = "dropdownBoxService.productGroupConfiguration"
                               else if attribute.Name == 'LocationDropdown'
                               for attribute in property.Attributes
                                   additionalQueryParameters = "['type', '=', 1]"
                                   if (attribute.Arguments | String.Split ": " | Array.Last | String.Replace "[" "" | String.Replace "]" "") == 'LocationType.Warehouse'
                                      additionalQueryParameters = "['type', '=', 2]"
                                   end
                                   configuration = "{
                                    advancedSearchColumns: [{ dataField: 'name', caption: 'General.Name' },
                                    { dataField: 'address', caption: 'Location.Address' },
                                    { dataField: 'building', caption: 'Location.Building' },
                                    { dataField: 'level', caption: 'Location.Level' },
                                    { dataField: 'room', caption: 'Location.Room' },
                                    { dataField: 'index', caption: 'Location.Index' }],
                                    fetchMethod: this.registerService.getLocations,
                                    fetchByIdMethod: this.registerService.getLocationByIdLight,
                                    displayValueProperties: ['name', 'address'],
                                    sortOptions: [{ selector: 'index', desc: false }],
                                    additionalQueryParameters: " + additionalQueryParameters +"}"
                               end
                               else if attribute.Name == 'MeasuringDeviceDropdown'
                                   configuration = "dropdownBoxService.measuringDeviceConfiguration"
                               else if attribute.Name == 'TeamDropdown'
                                   configuration = "dropdownBoxService.teamConfiguration"
                               else if attribute.Name == 'CostUnitDropdown'
                                   configuration = "dropdownBoxService.costUnitConfiguration"
                               else if attribute.Name == 'EmailTemplateDropdown'
                                   configuration = "dropdownBoxService.emailTemplateConfiguration"
                               else if attribute.Name == 'ComponentTypeDropdown'
                                   configuration = "dropdownBoxService.componentTypeConfiguration"
                               else if attribute.Name == 'AssetTypeDropdown'
                                   configuration = "dropdownBoxService.assetTypeConfiguration"
                               else if attribute.Name == 'DowntimeTypeDropdown'
                                   configuration = "dropdownBoxService.downtimeTypeConfiguration"
                               else if attribute.Name == 'UnitDropdown'
                                   configuration = "dropdownBoxService.unitConfiguration"
                               else if attribute.Name == 'UserDropdown'
                               for attribute in property.Attributes
                                   additionalQueryParameters = "[]"
                                   if (attribute.Arguments | String.Split ": " | Array.Last | String.Replace "[" "" | String.Replace "]" "") == 'True'
                                        additionalQueryParameters = "['isResource', '=', 'true']"
                                   end
                                   configuration = "{
                                               advancedSearchColumns: [
                                                   { dataField: 'firstname', caption: 'User.Firstname' },
                                                   { dataField: 'lastname', caption: 'User.Lastname' },
                                                   { dataField: 'email', caption: 'User.Email' }],
                                               fetchMethod: this.userService.getUsers,
                                               fetchByIdMethod: this.userService.getUserByIdLight,
                                               displayValueProperties: ['fullname'],
                                               sortOptions: [{ selector: 'firstname', desc: false }],
                                               additionalQueryParameters:" + additionalQueryParameters +"}"
                               end
                               else if attribute.Name == 'OrderPriorityDropdown'
                                   configuration = "dropdownBoxService.orderPriorityConfiguration"
                               else if attribute.Name == 'AssetComponentDropdown'
                                   configuration = "dropdownBoxService.assetAndComponentConfiguration"
                               else if attribute.Name == 'OrderStatusDropdown'
                                   configuration = "dropdownBoxService.orderStatusConfiguration"
                               else if attribute.Name == 'WorkstepGroupDropdown'
                                   configuration = "dropdownBoxService.workstepGroupConfiguration"
                               end }}
                            <magplan-dropdown-box id="{{ id }}" name="{{ propertyName }}" formControlName="{{ formControlName }}"
                            [configuration]="{{configuration}}" [isRequired]="f['{{ (propertyName)}}']?.hasValidator(requiredValidator)" [propertyName]="'{{propertyName}}'" [label]="'{{label}}'">
                            </magplan-dropdown-box>
                            {{-else if (lookups | Array.Contains attribute.Name) || ((property.Type | String.Contains '[]') || (property.Type | String.Contains 'List')) }}
                            {{-
                                fetchMethod = "''"
                                fetchByIdMethod = "''"
                                displayExpression = "name"
                                displayValueProperties = "''"
                                displayValueProperties =  "['name']"
                            }}
                            {{- additionalQueryParameters = '[]'
                               if attribute.Name == 'TeamDropdown'
                                fetchMethod = 'administrationService.getTeams'
                                fetchByIdMethod = 'administrationService.getTeamById'
                               else if attribute.Name == 'FaqAppliesToDropdown'
                                fetchMethod = 'faqService.getAppliesToForFAQ'
                                fetchByIdMethod = 'faqService.getAppliesToForFAQById'
                               else if attribute.Name == 'UserDropdown'
                                fetchMethod = 'userService.getUsersLight'
                                fetchByIdMethod = 'userService.getUserByIdLight'
                                displayValueProperties =  "['firstname', 'lastname']"
                                for attribute in property.Attributes
                                   if (attribute.Arguments | String.Split ": " | Array.Last | String.Replace "[" "" | String.Replace "]" "") == 'True'
                                        additionalQueryParameters = "['isResource', '=', 'true']"
                                   end
                                end
                             end}}
                            <magplan-tag-box id="{{ id }}" name="{{ propertyName }}" formControlName="{{ formControlName }}"
                                [configuration]="{
                                    propertyName: '{{ propertyName }}',
                                    label: '{{label}}',
                                    fetchMethod: {{fetchMethod}},
                                    fetchByIdMethod: {{fetchByIdMethod}},
                                    isRequired: f['{{ (propertyName)}}']?.hasValidator(requiredValidator),
                                    displayValueProperties: {{displayValueProperties}},
                                    additionalQueryParameters: {{ additionalQueryParameters }}
                                    }"
                            ></magplan-tag-box>
                            {{-end}}
                        {{-end}}
                    {{-else }}
                        {{-for attribute in property.Attributes}}
                            {{-if attribute.Name == "TagBox" }}
                                <magplan-tag-box id="{{ id }}" name="{{ propertyName }}" formControlName="{{ formControlName }}"
                                    [configuration]="{
                                        propertyName: '{{ propertyName }}',
                                        label: '{{label}}',
                                        acceptCustomValue: true,
                                        isRequired: f['{{ (propertyName)}}']?.hasValidator(requiredValidator)
                                        }"
                                ></magplan-tag-box>
                            {{-end}}
                        {{-end}}
                    {{-end}}
                        <div *ngIf="(submitted || f?.{{ propertyName }}?.touched)" class="invalid-feedback d-block">
                            <span *ngIf="f.{{ propertyName }}.errors && f.{{ propertyName }}.errors.required" translate>Errors.Required</span>
                            {{- if (propertyName) == "email" }}
                            <span *ngIf="f.{{ propertyName }}.errors && f.{{ propertyName }}.errors.email" translate>Errors.Invalid</span>
                            {{- end}}
                            {{- if (propertyName) == "passwordConfirm" }}
                            <span *ngIf="f.password.value != f.passwordConfirm.value" translate>Errors.PasswordsDoNotMatch</span>
                            {{- end}}
                            <span *ngIf="f.{{ propertyName }}.errors && f.{{ propertyName }}.errors.maxlength" translate>Errors.TooLong</span>
                            <span *ngIf="f.{{ propertyName }}.errors && f.{{ propertyName }}.errors.minlength" translate>Errors.TooShort</span>
                            <span *ngIf="f.{{ propertyName }}.errors && f.{{ propertyName }}.errors.max" translate [translateParams]="{ value: f.{{ propertyName }}.errors.max.max }">Errors.MaxValue</span>
                            <span *ngIf="f.{{ propertyName }}.errors && f.{{ propertyName }}.errors.min" translate [translateParams]="{ value: f.{{ propertyName }}.errors.min.min }">Errors.MinValue</span>
                        </div>
                    </div>
                {{- end}}
                </div>
               {{-end}}
                {{- index = index + 1 }}
            {{- end}}
                <magplan-custom-inputs-form #customFieldsForm *ngIf="customFieldsAppModule" [appModule]="customFieldsAppModule" [formGroup]="form" [values]="customFieldValues"></magplan-custom-inputs-form>
                <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-3" *ngIf="showButtons">
                    <button *ngIf="!isProdEnvironment" class="btn btn-danger" type="button" (click)="enableDebug = !enableDebug"><i class="bx bx-bug"></i></button>
                    <button *ngIf="showAddNewButton" (click)="addNew()" class="btn btn-secondary" type="button">{%{{{ 'Buttons.AddNew' | translate }}}%}</button>
                    <button *ngIf="showCancelButton" (click)="cancel()" class="btn btn-secondary" type="button">{%{{{ 'Buttons.Cancel' | translate }}}%}</button>
                    <button *ngIf="showResetButton" (click)="reset()" class="btn btn-warning" type="button">{%{{{ 'Buttons.Reset' | translate }}}%}</button>
                    <button *ngIf="showDeleteButton" (click)="delete()" class="btn btn-danger" type="button">{%{{{ 'Buttons.Delete' | translate }}}%}</button>
                    <button class="btn btn-primary" type="submit" [disabled]="!form.dirty || submitDisabled" *ngIf="showSubmitButton">{%{{{ submitButton | translate }}}%}</button>
                </div>
            </div>
        </form>
        <ng-container *ngIf="enableDebug && !isProdEnvironment">
            <pre>
                {%{{{ this.form.value | json }}}%}
            </pre>
            <h6>
            Form invalid: {%{{{this.form.invalid}}}%}, Form pristine: {%{{{this.form.pristine}}}%}, Form touched: {%{{{this.form.touched}}}%}
            </h6>
            <ng-container *ngIf="this.form.invalid">
                <h6>Form Errors:</h6>
                <span *ngFor="let control of formControlKeys">
                    {%{{{control}}}%}: {%{{{ this.form.controls[control].errors | json }}}%} <br/>
                </span>
            </ng-container>
        </ng-container>
        <magplan-unsaved-changes-modal #unsavedChangesModal (onCancel)="executeCancel($event)" (onSubmitAndCancel)="submitAndCancel($event)"></magplan-unsaved-changes-modal>
        <magplan-translations-modal [translationSection]="'{{module}}'" [formProperties]="formProperties" [hideConfig]="hide" #translationsModal></magplan-translations-modal>
        <magplan-inputs-display-modal #inputsModal [formName]="modelName" [hideConfig]="hide" [formProperties]="formProperties" [module]="'{{module}}'"></magplan-inputs-display-modal>
        <magplan-text-input-modal #textModal (onPatchSpecificFormValue)="patchSpecificFormValue($event)" [module]="'{{module}}'"></magplan-text-input-modal>
    `
})
export class {{ class.BareName | String.Replace "BM" "FormComponent" }} implements OnInit, OnDestroy, OnChanges, AfterViewInit {

    private _unsubscribeAll = new Subject();

    {{-
    properties = []
    for property in class.Properties | Symbols.ThatArePublic
        properties = Array.Add properties property.Name
    end }}
    public formProperties = {{properties}};
    public objKeyValueRegisterType = objKeyValueRegisterType;
    public enableDebug = false;
    public submitted: boolean = false;
    public formControlKeys = [];
    public submitDisabled = false;
    public isProdEnvironment = environment.production;
    public appModule = AppModule;
    public combinedHideConfig;
    
    public currencyEnum = Currency;
    public currentCurrency;

    @Input()
    public form: UntypedFormGroup;

    @Input()
    public hide: {{ inputFields }} = {};

    @Input()
    public disable: {{ inputFields }} = {};

    @Input()
    public configuration: {{ inputFields }} = {};

    @Input()
    public inputMaskConfiguration: {{ inputFields }} = {};

    @Input()
    public showButtons = true;

    @Input()
    public showSubmitButton = true;

    @Input()
    public showCancelButton = true;

    @Input()
    public showDeleteButton = true;

    @Input()
    public showAddNewButton = false;

    @Input()
    public showResetButton = false;

    @Input()
    public submitButton = 'Buttons.Save';

    @Input()
    showInputsDisplayConfig = false;

    @Input()
    public featuredImage = null;

    @Input()
    public featuredImageLabel = false;

    @Input()
    public showBarcode = null;

    @Input()
    public autofocusInput: string;

    @Input()
    public moveTranslateButtonUp = false;

    @Input()
    public hasTitle = true;

    @Input()
    public customFieldsAppModule: CustomFieldAppModule;

    @Input()
    public customFieldValues;

    @Input()
    public modelName = '{{class.BareName}}';

    @Input()
    public preventUnsavedNavigation = false;

    @Output()
    public onSubmit: EventEmitter<any> = new EventEmitter(true);

    @Output()
    public onDelete: EventEmitter<any> = new EventEmitter(true);

    @Output()
    public onLoaded: EventEmitter<any> = new EventEmitter(true);

    @Output()
    public onCancel: EventEmitter<any> = new EventEmitter(true);

    @Output()
    public onAddNew: EventEmitter<any> = new EventEmitter(true);

    @ViewChildren(DxNumberBoxComponent)
    public maskableInputs: QueryList<DxNumberBoxComponent>;

    @ViewChild('unsavedChangesModal', { static: false })
    public unsavedChangesModal: UnsavedChangesModalComponent;

    @ViewChild('translationsModal', { static: false })
    public translationsModal: TranslationsModalComponent;

    @ViewChild('inputsModal', { static: false })
    public inputsModal: InputsDisplayModalComponent;

    @ViewChild('textModal', { static: false })
    public textModal: TextInputModalComponent;

    @ViewChildren(DropdownBoxComponent)
    public magplanDropdowns: QueryList<DropdownBoxComponent>;

    @ViewChildren(RegisterSelectComponent)
    public magplanRegisterDropdowns: QueryList<RegisterSelectComponent>;

    @ViewChildren(DxDateBoxComponent)
    public dateBoxInputs: QueryList<DxDateBoxComponent>;

    @ViewChildren(TagBoxComponent)
    public tagBoxInputs: QueryList<TagBoxComponent>;

    @ViewChildren(ImageInputComponent)
    public imageInputComponents: QueryList<ImageInputComponent>;

    @ViewChild('damageSymptomDropdown')
    public damageSymptomDropdown: DamageSymptomDropdownComponent;

    @ViewChild('customFieldsForm')
    public customFieldsForm: CustomInputsFormComponent;

    constructor(private formService: {{ class.Name  |  String.Replace "BM" "FormService" }},
        private userAuthService: UserAuthService,
        public dropdownBoxService: DropdownBoxService,
        public administrationService: AdministrationService,
        public userService: UserService,
        public faqService: FAQService,
        public businessPartnerService: BusinessPartnerService,
        public registerService: RegisterService,
        private hideInputsService: HideInputsService,
        private router: Router,
        private backNavigationService: BackNavigationService) {
            this.form = formService.getForm();
            this.formControlKeys = Object.keys(this.form.controls);
            this.currentCurrency = this.userAuthService.getClientSetting(SettingKey.CurrencyFormat)?.value;
    }

    get f() { return this.form.controls; }

    private preventImmediateSubmit() {
        this.submitDisabled = true;
        const submitTimeout = setTimeout(() => {
            this.submitDisabled = false;
            clearTimeout(submitTimeout);
        }, 1000);
    }

    public submit() {
        if (this.form.invalid) {
            this.form.markAllAsTouched();
            return;
        };
        this.preventImmediateSubmit();
        this.onSubmit.emit(this.form.getRawValue());
    }

    public submitAndCancel(routeUrl?:string) {
        if (this.form.invalid) {
            this.form.markAllAsTouched();
            return;
        };

        this.form.markAsPristine()
        this.preventImmediateSubmit();
        this.onSubmit.emit(this.form.getRawValue());
        this.executeCancel(routeUrl);
    }

    public patchValues(model: any, options: { emitEvent: boolean } = { emitEvent: true }) {
        this.formService.patchValues(this.form, model, options);
    }

    public patchSpecificFormValue(keyValue: KeyValue<string, string>) {
        this.form.controls[keyValue.key].patchValue(keyValue.value);
    }

    public cancel() {
        if (this.form.dirty) {
            this.openUnasavedChangesModal();
            return;
        }

        this.executeCancel();
    }

    public executeCancel(routeUrl?: string) {
        this.form.markAsPristine()
        this.form.markAsUntouched()
        if (this.onCancel.observers.length == 0) {
            if (routeUrl !== undefined) {
                this.router.navigate([routeUrl]);
                return;
            }
            this.backNavigationService.navigateBack();
        } else {
            this.onCancel.emit(true);
        }
    }

    public openUnasavedChangesModal(routeUrl?: string) {
        this.unsavedChangesModal.open(routeUrl);
    }

    public delete() {
        this.onDelete.emit(true);
    }

    public addNew() {
        this.onAddNew.emit(true);
    }

    public reset() {
        this.form.reset();
    }

    public requiredValidator = Validators.required;

    public setControlAsRequired(controlName: {{ fields }}) {
        this.f[controlName].addValidators(Validators.required);
        this.f[controlName].updateValueAndValidity();
    }

    public setControlAsOptional(controlName: {{ fields }}) {
        this.f[controlName].removeValidators(Validators.required);
        this.f[controlName].updateValueAndValidity();
    }

    public disableControl = (controlName: {{ fields }}, opts?: { onlySelf?: boolean; emitEvent?: boolean; }) => this.f[controlName].disable(opts);

    public enableControl = (controlName: {{ fields }}, opts?: { onlySelf?: boolean; emitEvent?: boolean; }) => this.f[controlName].enable(opts);

    public hideControl = (controlName: {{ fields }}) => this.combinedHideConfig[controlName] = true;

    public showControl = (controlName: {{ fields }}) => delete this.combinedHideConfig[controlName];

    public disableControls() {
        Object.keys(this.disable).forEach((d: any) => {
            this.disableControl(d);
        });
    }

    public getVisibleControlValues() {
        let model = {};
        const hiddenControls = Object.keys(this.hide);
        Object.keys(this.form.controls).forEach(key => {
            if (!hiddenControls.some(hiddenControlKey => hiddenControlKey == key)) {
                model[key] = this.form.controls[key].value;
            }
        });
        return model;
    }

   private subscribeToRouterNavigation() {
        this.router?.events.pipe(takeUntil(this._unsubscribeAll)).subscribe( event => {
            if(event instanceof NavigationStart) {
                if (this.form.dirty) {
                    //cancel navigation - navigate to previous url
                    this.router.navigate([this.router.url])
                    
                    this.openUnasavedChangesModal(event.url);
                }
            }
        });
        
    }

    private setInputMasks() {
        if (this.inputMaskConfiguration)
            Object.keys(this.inputMaskConfiguration).forEach(key => {
                if (!this.maskableInputs || !this.maskableInputs.length) return;
                const numberInput = this.maskableInputs.find(f => f.name === key);
                if (numberInput) {
                    numberInput.format = this.inputMaskConfiguration[key];
                }
            });
    }

    public getDropdown(id: {{ fields }}) {
        if (!this.magplanDropdowns) return null;
        const dropdown = this.magplanDropdowns.find(d => d.id == id);
        if (dropdown)
            return dropdown;
    }

    public getRegisterDropdown(id: {{ fields }}) {
        if (!this.magplanRegisterDropdowns) return null;
        const dropdown = this.magplanRegisterDropdowns.find(d => d.id == id);
        if (dropdown)
            return dropdown;
    }

    public getDateBox(id: {{ fields }}) {
        if (!this.dateBoxInputs) return null;
        const datebox = this.dateBoxInputs.find((d: any) => d.id == id);
        if (datebox)
            return datebox;
    }

    public getTagBox(id: {{ fields }}) {
        if (!this.tagBoxInputs) return null;
        const tagBox = this.tagBoxInputs.find(d => d.configuration.propertyName == id);
        if (tagBox)
            return tagBox;
    }

    public getImageInput(id: {{ fields }}) {
        if (!this.imageInputComponents) return null;
        const imageInput = this.imageInputComponents.find(d => d.id == id);
        if (imageInput)
            return imageInput;
    }

    public openTranslationsModal() {
        this.translationsModal.open();
    }

    public openInputsDisplayModal() {
        this.inputsModal.open();
    }

    public openTextInputModal(formControlName: string) {
        this.textModal.formControlName = formControlName;
        this.textModal.formControl = this.formService.getForm().controls[formControlName] as FormControl;
        this.textModal.formControl.patchValue(this.form.controls[formControlName].value);
        this.textModal.open();
    }

    ngOnChanges() {
        this.setInputMasks()
    }

    ngOnDestroy() {
        this._unsubscribeAll.next();
        this._unsubscribeAll.complete();
    }

    ngOnInit() {
        this.onLoaded.emit(true);
        this.disableControls();
        this.setInputMasks();
        this.combinedHideConfig = this.hideInputsService.generateCombinedHideConfig(this.hide, this.modelName);

        if (this.preventUnsavedNavigation) {
            this.subscribeToRouterNavigation();
        }
    }

    ngAfterViewInit(): void {
        if (this.autofocusInput) document.getElementById(this.autofocusInput).focus();
    }

}

{{- end
   filePath =  class.BareName | String.Downcase | String.Replace "bm" "-form.component" | String.Append ".ts" | String.Prepend "./form-components/"
   Save output filePath
   end }}
