{{ config.RenderWhenProjectBuildIsDone = false }}
{{ config.RenderWhenTemplateIsSaved = false }}

{{- func ToTypeScriptType}}
    {{- if $0 == "DateOnly" }}string
    {{ else if $0 == "DateOnly?" }}string | null
    {{ else}}{{ $0 | Type.ToTypeScriptType }}
    {{- end}}
{{- end}}
{{ config.RenderWhenProjectBuildIsDone = false }}
{{ config.RenderWhenTemplateIsSaved = false }}
{{ dto = data.Classes | Symbols.WhereNameEndsWith "DTO" }}
{{ bm = data.Classes | Symbols.WhereNameEndsWith "BM" }}
{{ classes = dto | Array.AddRange bm }}
{{ for class in classes
       capture output -}}

import { AbstractControl, FormControl } from '@angular/forms';

{{- for property in class | Type.AllReferencedTypes }}
{{- if property.IsEnum}}
import { {{ property }} } from './{{ property }}';            
{{- else}}
{{- ignore = false
    for attribute in property.Attributes
        if property.Name | String.Contains "ETag"
            ignore = true
        end
    end
if ignore
    break
end }}
import { {{ property }}, I{{ property }}, I{{ property }}Form } from './{{ property }}';            
{{- end}}
{{-end }}

export interface {{ class.Name | String.Prepend "I" }}{{if class.HasBaseClass}} extends I{{ class.BaseClass }}{{end}} {
{{- for property in class.Properties | Symbols.ThatArePublic }}
    {{- ignore = false
        for attribute in property.Attributes
            if attribute.Name | String.Contains "TypewriterIgnore"
                ignore = true
            end
        end
    if ignore
        break
    end }}
    {{ property.Name | String.ToCamelCase }}: {{ property.Type | ToTypeScriptType }};
{{- end}}
}

export interface {{ class.Name | String.Prepend "I" | String.Append "Form" }}{{if class.HasBaseClass}} extends I{{ class.BaseClass | String.Append "Form" }}{{end}} {
{{- for property in class.Properties | Symbols.ThatArePublic }}
    {{- ignore = false
        for attribute in property.Attributes
            if attribute.Name | String.Contains "TypewriterIgnore"
                ignore = true
            end
        end
    if ignore
        break
    end }}
    {{ property.Name | String.ToCamelCase }}: AbstractControl<{{ property.Type | ToTypeScriptType }}>;
{{- end}}
}

export class {{ class.Name }} {{if class.HasBaseClass}} extends {{ class.BaseClass }}{{end}} implements I{{ class.Name }} {
{{- for property in class.Properties | Symbols.ThatArePublic }}
        {{- ignore = false
                for attribute in property.Attributes
                    if attribute.Name | String.Contains "TypewriterIgnore"
                        ignore = true
                    end
                end
            if ignore
                break
            end }}
    {{ property.Name | String.ToCamelCase }}!: {{ property.Type | ToTypeScriptType }};
{{- end}}
    constructor(model?: I{{ class.Name }}) {
        {{if class.HasBaseClass}}super(model);{{end}}
        if (model) {
            {{- for property in class.Properties | Symbols.ThatArePublic }}
                {{- ignore = false
                    for attribute in property.Attributes
                        if attribute.Name | String.Contains "TypewriterIgnore"
                            ignore = true
                        end
                    end
                if ignore
                    break
                end }}
            this.{{ property.Name | String.ToCamelCase }} =  model.{{ property.Name | String.ToCamelCase }};
            {{- end}}
        }
    }
}

export type {{ class.Name | String.Replace "DTO" "InputFields" | String.Replace "BM" "InputFields" }} = { [key in keyof I{{ class.Name }}]?: any };
export type {{ class.Name | String.Replace "DTO" "Fields" | String.Replace "BM" "Fields" }} = keyof I{{ class.Name }};

{{- properties = []
    for property in class.Properties | Symbols.ThatArePublic
        properties = Array.Add properties (property.Name | String.ToCamelCase)
end }}
export const {{ class.Name  | String.ToCamelCase }}Properties = {{properties}};

{{- for attribute in class.Attributes
    if attribute.Name | String.Contains "LinkedClass"
    linkedClassAttributePropertyName = attribute.Arguments | Array.First | String.Split ':' | Array.Last | String.Strip }}
export const {{ class.Name  | String.ToCamelCase }}PropertyTo{{ linkedClassAttributePropertyName }}Property = {
        {{- for property in class.Properties | Symbols.ThatArePublic
            for attribute in property.Attributes 
                if attribute.Name | String.Contains "LinkedProperty"
                   linkedPropertyAttributeProperty = attribute.Arguments | Array.First }}
{{property.Name | String.ToCamelCase }} : "{{ linkedPropertyAttributeProperty | String.Split ':' | Array.Last | String.Strip | String.ToCamelCase }}",
                {{-end}}
            {{-end}}
        {{-end}}
};
    {{-end}}
{{-end}}

{{- end
   filePath =  class.BareName | String.Append ".ts" | String.Prepend "./models/"
   Save output filePath
end }}
